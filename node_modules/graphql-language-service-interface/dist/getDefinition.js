"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefinitionQueryResultForNamedType = getDefinitionQueryResultForNamedType;
exports.getDefinitionQueryResultForFragmentSpread = getDefinitionQueryResultForFragmentSpread;
exports.getDefinitionQueryResultForDefinitionNode = getDefinitionQueryResultForDefinitionNode;
exports.LANGUAGE = void 0;

var _graphqlLanguageServiceUtils = require("graphql-language-service-utils");

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var LANGUAGE = 'GraphQL';
exports.LANGUAGE = LANGUAGE;

function getRange(text, node) {
  var location = node.loc;
  (0, _assert["default"])(location, 'Expected ASTNode to have a location.');
  return (0, _graphqlLanguageServiceUtils.locToRange)(text, location);
}

function getPosition(text, node) {
  var location = node.loc;
  (0, _assert["default"])(location, 'Expected ASTNode to have a location.');
  return (0, _graphqlLanguageServiceUtils.offsetToPosition)(text, location.start);
}

function getDefinitionQueryResultForNamedType(_x, _x2, _x3) {
  return _getDefinitionQueryResultForNamedType.apply(this, arguments);
}

function _getDefinitionQueryResultForNamedType() {
  _getDefinitionQueryResultForNamedType = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(text, node, dependencies) {
    var name, defNodes, definitions;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            name = node.name.value;
            defNodes = dependencies.filter(function (_ref) {
              var definition = _ref.definition;
              return definition.name && definition.name.value === name;
            });

            if (!(defNodes.length === 0)) {
              _context.next = 5;
              break;
            }

            process.stderr.write("Definition not found for GraphQL type ".concat(name));
            return _context.abrupt("return", {
              queryRange: [],
              definitions: []
            });

          case 5:
            definitions = defNodes.map(function (_ref2) {
              var filePath = _ref2.filePath,
                  content = _ref2.content,
                  definition = _ref2.definition;
              return getDefinitionForNodeDefinition(filePath || '', content, definition);
            });
            return _context.abrupt("return", {
              definitions: definitions,
              queryRange: definitions.map(function (_) {
                return getRange(text, node);
              })
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getDefinitionQueryResultForNamedType.apply(this, arguments);
}

function getDefinitionQueryResultForFragmentSpread(_x4, _x5, _x6) {
  return _getDefinitionQueryResultForFragmentSpread.apply(this, arguments);
}

function _getDefinitionQueryResultForFragmentSpread() {
  _getDefinitionQueryResultForFragmentSpread = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(text, fragment, dependencies) {
    var name, defNodes, definitions;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            name = fragment.name.value;
            defNodes = dependencies.filter(function (_ref3) {
              var definition = _ref3.definition;
              return definition.name.value === name;
            });

            if (!(defNodes.length === 0)) {
              _context2.next = 5;
              break;
            }

            process.stderr.write("Definition not found for GraphQL fragment ".concat(name));
            return _context2.abrupt("return", {
              queryRange: [],
              definitions: []
            });

          case 5:
            definitions = defNodes.map(function (_ref4) {
              var filePath = _ref4.filePath,
                  content = _ref4.content,
                  definition = _ref4.definition;
              return getDefinitionForFragmentDefinition(filePath || '', content, definition);
            });
            return _context2.abrupt("return", {
              definitions: definitions,
              queryRange: definitions.map(function (_) {
                return getRange(text, fragment);
              })
            });

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getDefinitionQueryResultForFragmentSpread.apply(this, arguments);
}

function getDefinitionQueryResultForDefinitionNode(path, text, definition) {
  return {
    definitions: [getDefinitionForFragmentDefinition(path, text, definition)],
    queryRange: definition.name ? [getRange(text, definition.name)] : []
  };
}

function getDefinitionForFragmentDefinition(path, text, definition) {
  var name = definition.name;
  (0, _assert["default"])(name, 'Expected ASTNode to have a Name.');
  return {
    path: path,
    position: getPosition(text, definition),
    range: getRange(text, definition),
    name: name.value || '',
    language: LANGUAGE,
    // This is a file inside the project root, good enough for now
    projectRoot: path
  };
}

function getDefinitionForNodeDefinition(path, text, definition) {
  var name = definition.name;
  (0, _assert["default"])(name, 'Expected ASTNode to have a Name.');
  return {
    path: path,
    position: getPosition(text, definition),
    range: getRange(text, definition),
    name: name.value || '',
    language: LANGUAGE,
    // This is a file inside the project root, good enough for now
    projectRoot: path
  };
}