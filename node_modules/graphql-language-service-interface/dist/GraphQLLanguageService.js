"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLLanguageService = void 0;

var _graphql = require("graphql");

var _getAutocompleteSuggestions3 = require("./getAutocompleteSuggestions");

var _getHoverInformation3 = require("./getHoverInformation");

var _getDiagnostics2 = require("./getDiagnostics");

var _getDefinition2 = require("./getDefinition");

var _graphqlLanguageServiceUtils = require("graphql-language-service-utils");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FRAGMENT_DEFINITION = _graphql.Kind.FRAGMENT_DEFINITION,
    OBJECT_TYPE_DEFINITION = _graphql.Kind.OBJECT_TYPE_DEFINITION,
    INTERFACE_TYPE_DEFINITION = _graphql.Kind.INTERFACE_TYPE_DEFINITION,
    ENUM_TYPE_DEFINITION = _graphql.Kind.ENUM_TYPE_DEFINITION,
    UNION_TYPE_DEFINITION = _graphql.Kind.UNION_TYPE_DEFINITION,
    SCALAR_TYPE_DEFINITION = _graphql.Kind.SCALAR_TYPE_DEFINITION,
    INPUT_OBJECT_TYPE_DEFINITION = _graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    SCALAR_TYPE_EXTENSION = _graphql.Kind.SCALAR_TYPE_EXTENSION,
    OBJECT_TYPE_EXTENSION = _graphql.Kind.OBJECT_TYPE_EXTENSION,
    INTERFACE_TYPE_EXTENSION = _graphql.Kind.INTERFACE_TYPE_EXTENSION,
    UNION_TYPE_EXTENSION = _graphql.Kind.UNION_TYPE_EXTENSION,
    ENUM_TYPE_EXTENSION = _graphql.Kind.ENUM_TYPE_EXTENSION,
    INPUT_OBJECT_TYPE_EXTENSION = _graphql.Kind.INPUT_OBJECT_TYPE_EXTENSION,
    DIRECTIVE_DEFINITION = _graphql.Kind.DIRECTIVE_DEFINITION,
    FRAGMENT_SPREAD = _graphql.Kind.FRAGMENT_SPREAD,
    OPERATION_DEFINITION = _graphql.Kind.OPERATION_DEFINITION,
    NAMED_TYPE = _graphql.Kind.NAMED_TYPE;

var GraphQLLanguageService =
/*#__PURE__*/
function () {
  function GraphQLLanguageService(cache) {
    _classCallCheck(this, GraphQLLanguageService);

    _defineProperty(this, "_graphQLCache", void 0);

    _defineProperty(this, "_graphQLConfig", void 0);

    this._graphQLCache = cache;
    this._graphQLConfig = cache.getGraphQLConfig();
  }

  _createClass(GraphQLLanguageService, [{
    key: "getDiagnostics",
    value: function () {
      var _getDiagnostics = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(query, uri, isRelayCompatMode) {
        var queryHasExtensions, projectConfig, schemaPath, queryAST, range, source, fragmentDefinitions, fragmentDependencies, dependenciesSource, validationAst, customRules, customRulesModulePath, rulesPath, schema;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Perform syntax diagnostics first, as this doesn't require
                // schema/fragment definitions, even the project configuration.
                queryHasExtensions = false;
                projectConfig = this._graphQLConfig.getConfigForFile(uri);
                schemaPath = projectConfig.schemaPath;
                _context.prev = 3;
                queryAST = (0, _graphql.parse)(query);

                if (!schemaPath || uri !== schemaPath) {
                  queryHasExtensions = queryAST.definitions.some(function (definition) {
                    switch (definition.kind) {
                      case OBJECT_TYPE_DEFINITION:
                      case INTERFACE_TYPE_DEFINITION:
                      case ENUM_TYPE_DEFINITION:
                      case UNION_TYPE_DEFINITION:
                      case SCALAR_TYPE_DEFINITION:
                      case INPUT_OBJECT_TYPE_DEFINITION:
                      case SCALAR_TYPE_EXTENSION:
                      case OBJECT_TYPE_EXTENSION:
                      case INTERFACE_TYPE_EXTENSION:
                      case UNION_TYPE_EXTENSION:
                      case ENUM_TYPE_EXTENSION:
                      case INPUT_OBJECT_TYPE_EXTENSION:
                      case DIRECTIVE_DEFINITION:
                        return true;
                    }

                    return false;
                  });
                }

                _context.next = 12;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](3);
                range = (0, _getDiagnostics2.getRange)(_context.t0.locations[0], query);
                return _context.abrupt("return", [{
                  severity: _getDiagnostics2.SEVERITY.ERROR,
                  message: _context.t0.message,
                  source: 'GraphQL: Syntax',
                  range: range
                }]);

              case 12:
                // If there's a matching config, proceed to prepare to run validation
                source = query;
                _context.next = 15;
                return this._graphQLCache.getFragmentDefinitions(projectConfig);

              case 15:
                fragmentDefinitions = _context.sent;
                _context.next = 18;
                return this._graphQLCache.getFragmentDependencies(query, fragmentDefinitions);

              case 18:
                fragmentDependencies = _context.sent;
                dependenciesSource = fragmentDependencies.reduce(function (prev, cur) {
                  return "".concat(prev, " ").concat((0, _graphql.print)(cur.definition));
                }, '');
                source = "".concat(source, " ").concat(dependenciesSource);
                validationAst = null;
                _context.prev = 22;
                validationAst = (0, _graphql.parse)(source);
                _context.next = 29;
                break;

              case 26:
                _context.prev = 26;
                _context.t1 = _context["catch"](22);
                return _context.abrupt("return", []);

              case 29:
                customRulesModulePath = projectConfig.extensions.customValidationRules;

                if (customRulesModulePath) {
                  /* eslint-disable no-implicit-coercion */
                  rulesPath = require.resolve("".concat(customRulesModulePath));

                  if (rulesPath) {
                    customRules = require("".concat(rulesPath))(this._graphQLConfig);
                  }
                  /* eslint-enable no-implicit-coercion */

                }

                _context.next = 33;
                return this._graphQLCache.getSchema(projectConfig.projectName, queryHasExtensions)["catch"](function () {
                  return null;
                });

              case 33:
                schema = _context.sent;

                if (schema) {
                  _context.next = 36;
                  break;
                }

                return _context.abrupt("return", []);

              case 36:
                return _context.abrupt("return", (0, _getDiagnostics2.validateQuery)(validationAst, schema, customRules, isRelayCompatMode));

              case 37:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 8], [22, 26]]);
      }));

      function getDiagnostics(_x, _x2, _x3) {
        return _getDiagnostics.apply(this, arguments);
      }

      return getDiagnostics;
    }()
  }, {
    key: "getAutocompleteSuggestions",
    value: function () {
      var _getAutocompleteSuggestions2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(query, position, filePath) {
        var projectConfig, schema;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                projectConfig = this._graphQLConfig.getConfigForFile(filePath);
                _context2.next = 3;
                return this._graphQLCache.getSchema(projectConfig.projectName)["catch"](function () {
                  return null;
                });

              case 3:
                schema = _context2.sent;

                if (!schema) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", (0, _getAutocompleteSuggestions3.getAutocompleteSuggestions)(schema, query, position));

              case 6:
                return _context2.abrupt("return", []);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getAutocompleteSuggestions(_x4, _x5, _x6) {
        return _getAutocompleteSuggestions2.apply(this, arguments);
      }

      return getAutocompleteSuggestions;
    }()
  }, {
    key: "getHoverInformation",
    value: function () {
      var _getHoverInformation2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(query, position, filePath) {
        var projectConfig, schema;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                projectConfig = this._graphQLConfig.getConfigForFile(filePath);
                _context3.next = 3;
                return this._graphQLCache.getSchema(projectConfig.projectName)["catch"](function () {
                  return null;
                });

              case 3:
                schema = _context3.sent;

                if (!schema) {
                  _context3.next = 6;
                  break;
                }

                return _context3.abrupt("return", (0, _getHoverInformation3.getHoverInformation)(schema, query, position));

              case 6:
                return _context3.abrupt("return", '');

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getHoverInformation(_x7, _x8, _x9) {
        return _getHoverInformation2.apply(this, arguments);
      }

      return getHoverInformation;
    }()
  }, {
    key: "getDefinition",
    value: function () {
      var _getDefinition = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4(query, position, filePath) {
        var projectConfig, ast, node;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                projectConfig = this._graphQLConfig.getConfigForFile(filePath);
                _context4.prev = 1;
                ast = (0, _graphql.parse)(query);
                _context4.next = 8;
                break;

              case 5:
                _context4.prev = 5;
                _context4.t0 = _context4["catch"](1);
                return _context4.abrupt("return", null);

              case 8:
                node = (0, _graphqlLanguageServiceUtils.getASTNodeAtPosition)(query, ast, position);

                if (!node) {
                  _context4.next = 16;
                  break;
                }

                _context4.t1 = node.kind;
                _context4.next = _context4.t1 === FRAGMENT_SPREAD ? 13 : _context4.t1 === FRAGMENT_DEFINITION ? 14 : _context4.t1 === OPERATION_DEFINITION ? 14 : _context4.t1 === NAMED_TYPE ? 15 : 16;
                break;

              case 13:
                return _context4.abrupt("return", this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig));

              case 14:
                return _context4.abrupt("return", (0, _getDefinition2.getDefinitionQueryResultForDefinitionNode)(filePath, query, node));

              case 15:
                return _context4.abrupt("return", this._getDefinitionForNamedType(query, ast, node, filePath, projectConfig));

              case 16:
                return _context4.abrupt("return", null);

              case 17:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[1, 5]]);
      }));

      function getDefinition(_x10, _x11, _x12) {
        return _getDefinition.apply(this, arguments);
      }

      return getDefinition;
    }()
  }, {
    key: "_getDefinitionForNamedType",
    value: function () {
      var _getDefinitionForNamedType2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5(query, ast, node, filePath, projectConfig) {
        var objectTypeDefinitions, dependencies, localObjectTypeDefinitions, typeCastedDefs, localOperationDefinationInfos, result;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._graphQLCache.getObjectTypeDefinitions(projectConfig);

              case 2:
                objectTypeDefinitions = _context5.sent;
                _context5.next = 5;
                return this._graphQLCache.getObjectTypeDependenciesForAST(ast, objectTypeDefinitions);

              case 5:
                dependencies = _context5.sent;
                localObjectTypeDefinitions = ast.definitions.filter(function (definition) {
                  return definition.kind === OBJECT_TYPE_DEFINITION || definition.kind === INPUT_OBJECT_TYPE_DEFINITION || definition.kind === ENUM_TYPE_DEFINITION;
                });
                typeCastedDefs = localObjectTypeDefinitions;
                localOperationDefinationInfos = typeCastedDefs.map(function (definition) {
                  return {
                    filePath: filePath,
                    content: query,
                    definition: definition
                  };
                });
                _context5.next = 11;
                return (0, _getDefinition2.getDefinitionQueryResultForNamedType)(query, node, dependencies.concat(localOperationDefinationInfos));

              case 11:
                result = _context5.sent;
                return _context5.abrupt("return", result);

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _getDefinitionForNamedType(_x13, _x14, _x15, _x16, _x17) {
        return _getDefinitionForNamedType2.apply(this, arguments);
      }

      return _getDefinitionForNamedType;
    }()
  }, {
    key: "_getDefinitionForFragmentSpread",
    value: function () {
      var _getDefinitionForFragmentSpread2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6(query, ast, node, filePath, projectConfig) {
        var fragmentDefinitions, dependencies, localFragDefinitions, typeCastedDefs, localFragInfos, result;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._graphQLCache.getFragmentDefinitions(projectConfig);

              case 2:
                fragmentDefinitions = _context6.sent;
                _context6.next = 5;
                return this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions);

              case 5:
                dependencies = _context6.sent;
                localFragDefinitions = ast.definitions.filter(function (definition) {
                  return definition.kind === FRAGMENT_DEFINITION;
                });
                typeCastedDefs = localFragDefinitions;
                localFragInfos = typeCastedDefs.map(function (definition) {
                  return {
                    filePath: filePath,
                    content: query,
                    definition: definition
                  };
                });
                _context6.next = 11;
                return (0, _getDefinition2.getDefinitionQueryResultForFragmentSpread)(query, node, dependencies.concat(localFragInfos));

              case 11:
                result = _context6.sent;
                return _context6.abrupt("return", result);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _getDefinitionForFragmentSpread(_x18, _x19, _x20, _x21, _x22) {
        return _getDefinitionForFragmentSpread2.apply(this, arguments);
      }

      return _getDefinitionForFragmentSpread;
    }()
  }]);

  return GraphQLLanguageService;
}();

exports.GraphQLLanguageService = GraphQLLanguageService;