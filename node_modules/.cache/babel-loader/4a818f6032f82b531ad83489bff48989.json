{"ast":null,"code":"\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst _require = require(\"ono\"),\n      ono = _require.ono;\n\nconst url = require(\"../util/url\");\n\nmodule.exports = {\n  /**\n   * The order that this resolver will run, in relation to other resolvers.\n   *\n   * @type {number}\n   */\n  order: 100,\n\n  /**\n   * Determines whether this resolver can read a given file reference.\n   * Resolvers that return true will be tried, in order, until one successfully resolves the file.\n   * Resolvers that return false will not be given a chance to resolve the file.\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @returns {boolean}\n   */\n  canRead(file) {\n    return url.isFileSystemPath(file.url);\n  },\n\n  /**\n   * Reads the given file and returns its raw contents as a Buffer.\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @returns {Promise<Buffer>}\n   */\n  read(file) {\n    return new Promise((resolve, reject) => {\n      let path;\n\n      try {\n        path = url.toFileSystemPath(file.url);\n      } catch (err) {\n        reject(ono.uri(err, \"Malformed URI: \".concat(file.url)));\n      } // console.log('Opening file: %s', path);\n\n\n      try {\n        fs.readFile(path, (err, data) => {\n          if (err) {\n            reject(ono(err, \"Error opening file \\\"\".concat(path, \"\\\"\")));\n          } else {\n            resolve(data);\n          }\n        });\n      } catch (err) {\n        reject(ono(err, \"Error opening file \\\"\".concat(path, \"\\\"\")));\n      }\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}