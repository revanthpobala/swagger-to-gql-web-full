{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _this = this;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar json_schema_ref_parser_1 = __importDefault(require(\"json-schema-ref-parser\"));\n\nvar swagger_1 = require(\"./swagger\");\n\nvar typeMap_1 = require(\"./typeMap\");\n\nfunction parseResponse(response, returnType) {\n  var nullableType = returnType instanceof graphql_1.GraphQLNonNull ? returnType.ofType : returnType;\n\n  if (nullableType instanceof graphql_1.GraphQLObjectType || nullableType instanceof graphql_1.GraphQLList) {\n    return response;\n  }\n\n  if (nullableType.name === 'String' && typeof response !== 'string') {\n    return JSON.stringify(response);\n  }\n\n  return response;\n}\n\nexports.parseResponse = parseResponse;\n\nvar getFields = function (endpoints, isMutation, gqlTypes, _a) {\n  var callBackend = _a.callBackend;\n  return Object.keys(endpoints).filter(function (operationId) {\n    return !!endpoints[operationId].mutation === !!isMutation;\n  }).reduce(function (result, operationId) {\n    var _a;\n\n    var endpoint = endpoints[operationId];\n    var type = typeMap_1.jsonSchemaTypeToGraphQL(operationId, endpoint.response || {\n      type: 'object',\n      properties: {}\n    }, 'response', false, gqlTypes, true);\n    var gType = {\n      type: type,\n      description: endpoint.description,\n      args: typeMap_1.mapParametersToFields(endpoint.parameters, operationId, gqlTypes),\n      resolve: function (_source, args, context, info) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _a = parseResponse;\n                return [4\n                /*yield*/\n                , callBackend({\n                  context: context,\n                  requestOptions: endpoint.getRequestOptions(args)\n                })];\n\n              case 1:\n                return [2\n                /*return*/\n                , _a.apply(void 0, [_b.sent(), info.returnType])];\n            }\n          });\n        });\n      }\n    };\n    return __assign({}, result, (_a = {}, _a[operationId] = gType, _a));\n  }, {});\n};\n\nvar schemaFromEndpoints = function (endpoints, options) {\n  var gqlTypes = {};\n  var queryFields = getFields(endpoints, false, gqlTypes, options);\n\n  if (!Object.keys(queryFields).length) {\n    throw new Error('Did not find any GET endpoints');\n  }\n\n  var rootType = new graphql_1.GraphQLObjectType({\n    name: 'Query',\n    fields: queryFields\n  });\n  var graphQLSchema = {\n    query: rootType\n  };\n  var mutationFields = getFields(endpoints, true, gqlTypes, options);\n\n  if (Object.keys(mutationFields).length) {\n    graphQLSchema.mutation = new graphql_1.GraphQLObjectType({\n      name: 'Mutation',\n      fields: mutationFields\n    });\n  }\n\n  return new graphql_1.GraphQLSchema(graphQLSchema);\n};\n\nexports.createSchema = function (options) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var schemaWithoutReferences, swaggerSchema, endpoints;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , json_schema_ref_parser_1.default.dereference(options.swaggerSchema)];\n\n        case 1:\n          schemaWithoutReferences = _a.sent();\n          swaggerSchema = swagger_1.addTitlesToJsonSchemas(schemaWithoutReferences);\n          endpoints = swagger_1.getAllEndPoints(swaggerSchema);\n          return [2\n          /*return*/\n          , schemaFromEndpoints(endpoints, options)];\n      }\n    });\n  });\n};\n\nexports.default = exports.createSchema;","map":null,"metadata":{},"sourceType":"script"}