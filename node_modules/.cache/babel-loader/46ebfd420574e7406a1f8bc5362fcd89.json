{"ast":null,"code":"\"use strict\";\n\nfunction dedent(strings) {\n  var raw = void 0;\n\n  if (typeof strings === \"string\") {\n    // dedent can be used as a plain function\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  } // first, perform interpolation\n\n\n  var result = \"\";\n\n  for (var i = 0; i < raw.length; i++) {\n    result += raw[i]. // join lines when there is a suppressed newline\n    replace(/\\\\\\n[ \\t]*/g, \"\"). // handle escaped backticks\n    replace(/\\\\`/g, \"`\");\n\n    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n      result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\n    }\n  } // now strip indentation\n\n\n  var lines = result.split(\"\\n\");\n  var mindent = null;\n  lines.forEach(function (l) {\n    var m = l.match(/^(\\s+)\\S+/);\n\n    if (m) {\n      var indent = m[1].length;\n\n      if (!mindent) {\n        // this is the first indented line\n        mindent = indent;\n      } else {\n        mindent = Math.min(mindent, indent);\n      }\n    }\n  });\n\n  if (mindent !== null) {\n    result = lines.map(function (l) {\n      return l[0] === \" \" ? l.slice(mindent) : l;\n    }).join(\"\\n\");\n  } // dedent eats leading and trailing whitespace too\n\n\n  result = result.trim(); // handle escaped newlines at the end to ensure they don't get stripped too\n\n  return result.replace(/\\\\n/g, \"\\n\");\n}\n\nif (typeof module !== \"undefined\") {\n  module.exports = dedent;\n}","map":null,"metadata":{},"sourceType":"script"}