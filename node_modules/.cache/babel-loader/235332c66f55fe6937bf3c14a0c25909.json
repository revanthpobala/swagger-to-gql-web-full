{"ast":null,"code":"import _defineProperty from \"/Users/revanthpobala/IdeaProjects/swagger-to-graphql-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSchema as createSchemaFromSwagger } from 'swagger-to-graphql';\nimport { safeLoad } from 'js-yaml';\n\nfunction getBodyAndHeaders(body, bodyType, headers) {\n  if (!body) {\n    return {\n      headers\n    };\n  }\n\n  if (bodyType === 'json') {\n    return {\n      headers: _objectSpread({\n        'Content-Type': 'application/json'\n      }, headers),\n      body: JSON.stringify(body)\n    };\n  }\n\n  return {\n    headers,\n    body: new URLSearchParams(body)\n  };\n}\n\nasync function callBackend({\n  requestOptions: {\n    method,\n    body,\n    baseUrl,\n    path,\n    query,\n    headers,\n    bodyType\n  }\n}) {\n  const searchPath = query ? \"?\".concat(new URLSearchParams(query)) : '';\n  const url = \"https://cors-anywhere.herokuapp.com/\".concat(baseUrl).concat(path).concat(searchPath);\n  const bodyAndHeaders = getBodyAndHeaders(body, bodyType, headers);\n  const response = await fetch(url, _objectSpread({\n    method\n  }, bodyAndHeaders));\n  const text = await response.text();\n\n  if (response.ok) {\n    try {\n      return JSON.parse(text);\n    } catch (e) {\n      return text;\n    }\n  }\n\n  throw new Error(\"Response: \".concat(response.status, \" - \").concat(text));\n}\n\nexport const createSchema = async url => {\n  const swaggerSchema = await callBackend({\n    context: {},\n    requestOptions: {\n      method: 'get',\n      baseUrl: url,\n      path: '',\n      bodyType: 'json'\n    }\n  });\n  const parsedSchema = typeof swaggerSchema === 'string' ? safeLoad(swaggerSchema) : swaggerSchema;\n  return createSchemaFromSwagger({\n    swaggerSchema: parsedSchema,\n    callBackend\n  });\n};","map":{"version":3,"sources":["/Users/revanthpobala/IdeaProjects/swagger-to-graphql-web/src/schema.ts"],"names":["createSchema","createSchemaFromSwagger","safeLoad","getBodyAndHeaders","body","bodyType","headers","JSON","stringify","URLSearchParams","callBackend","requestOptions","method","baseUrl","path","query","searchPath","url","bodyAndHeaders","response","fetch","text","ok","parse","e","Error","status","swaggerSchema","context","parsedSchema"],"mappings":";;;;;;AAAA,SACEA,YAAY,IAAIC,uBADlB,QAGO,oBAHP;AAIA,SAASC,QAAT,QAAyB,SAAzB;;AAEA,SAASC,iBAAT,CACEC,IADF,EAEEC,QAFF,EAGEC,OAHF,EAIE;AACA,MAAI,CAACF,IAAL,EAAW;AACT,WAAO;AAAEE,MAAAA;AAAF,KAAP;AACD;;AAED,MAAID,QAAQ,KAAK,MAAjB,EAAyB;AACvB,WAAO;AACLC,MAAAA,OAAO;AACL,wBAAgB;AADX,SAEFA,OAFE,CADF;AAKLF,MAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALD,KAAP;AAOD;;AAED,SAAO;AACLE,IAAAA,OADK;AAELF,IAAAA,IAAI,EAAE,IAAIK,eAAJ,CAAoBL,IAApB;AAFD,GAAP;AAID;;AAED,eAAeM,WAAf,CAA2B;AACzBC,EAAAA,cAAc,EAAE;AAAEC,IAAAA,MAAF;AAAUR,IAAAA,IAAV;AAAgBS,IAAAA,OAAhB;AAAyBC,IAAAA,IAAzB;AAA+BC,IAAAA,KAA/B;AAAsCT,IAAAA,OAAtC;AAA+CD,IAAAA;AAA/C;AADS,CAA3B,EAE6B;AAC3B,QAAMW,UAAU,GAAGD,KAAK,cAChB,IAAIN,eAAJ,CAAoBM,KAApB,CADgB,IAEpB,EAFJ;AAGA,QAAME,GAAG,iDAA0CJ,OAA1C,SAAoDC,IAApD,SAA2DE,UAA3D,CAAT;AACA,QAAME,cAAc,GAAGf,iBAAiB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,CAAxC;AACA,QAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD;AAC1BL,IAAAA;AAD0B,KAEvBM,cAFuB,EAA5B;AAKA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;;AACA,MAAIF,QAAQ,CAACG,EAAb,EAAiB;AACf,QAAI;AACF,aAAOf,IAAI,CAACgB,KAAL,CAAWF,IAAX,CAAP;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACV,aAAOH,IAAP;AACD;AACF;;AACD,QAAM,IAAII,KAAJ,qBAAuBN,QAAQ,CAACO,MAAhC,gBAA4CL,IAA5C,EAAN;AACD;;AAED,OAAO,MAAMrB,YAAY,GAAG,MAAOiB,GAAP,IAAuB;AACjD,QAAMU,aAAa,GAAG,MAAMjB,WAAW,CAAC;AACtCkB,IAAAA,OAAO,EAAE,EAD6B;AAEtCjB,IAAAA,cAAc,EAAE;AACdC,MAAAA,MAAM,EAAE,KADM;AAEdC,MAAAA,OAAO,EAAEI,GAFK;AAGdH,MAAAA,IAAI,EAAE,EAHQ;AAIdT,MAAAA,QAAQ,EAAE;AAJI;AAFsB,GAAD,CAAvC;AAUA,QAAMwB,YAAY,GAChB,OAAOF,aAAP,KAAyB,QAAzB,GAAoCzB,QAAQ,CAACyB,aAAD,CAA5C,GAA8DA,aADhE;AAGA,SAAO1B,uBAAuB,CAAC;AAC7B0B,IAAAA,aAAa,EAAEE,YADc;AAE7BnB,IAAAA;AAF6B,GAAD,CAA9B;AAID,CAlBM","sourcesContent":["import {\n  createSchema as createSchemaFromSwagger,\n  CallBackendArguments,\n} from 'swagger-to-graphql';\nimport { safeLoad } from 'js-yaml';\n\nfunction getBodyAndHeaders(\n  body: any,\n  bodyType: 'json' | 'formData',\n  headers: { [key: string]: string } | undefined,\n) {\n  if (!body) {\n    return { headers };\n  }\n\n  if (bodyType === 'json') {\n    return {\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: JSON.stringify(body),\n    };\n  }\n\n  return {\n    headers,\n    body: new URLSearchParams(body),\n  };\n}\n\nasync function callBackend({\n  requestOptions: { method, body, baseUrl, path, query, headers, bodyType },\n}: CallBackendArguments<{}>) {\n  const searchPath = query\n    ? `?${new URLSearchParams(query as Record<string, string>)}`\n    : '';\n  const url = `https://cors-anywhere.herokuapp.com/${baseUrl}${path}${searchPath}`;\n  const bodyAndHeaders = getBodyAndHeaders(body, bodyType, headers);\n  const response = await fetch(url, {\n    method,\n    ...bodyAndHeaders,\n  });\n\n  const text = await response.text();\n  if (response.ok) {\n    try {\n      return JSON.parse(text);\n    } catch (e) {\n      return text;\n    }\n  }\n  throw new Error(`Response: ${response.status} - ${text}`);\n}\n\nexport const createSchema = async (url: string) => {\n  const swaggerSchema = await callBackend({\n    context: {},\n    requestOptions: {\n      method: 'get',\n      baseUrl: url,\n      path: '',\n      bodyType: 'json',\n    },\n  });\n\n  const parsedSchema =\n    typeof swaggerSchema === 'string' ? safeLoad(swaggerSchema) : swaggerSchema;\n\n  return createSchemaFromSwagger({\n    swaggerSchema: parsedSchema,\n    callBackend,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}