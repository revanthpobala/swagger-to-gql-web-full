{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // TODO: fix no-param-reassign\n\n/* eslint-disable no-param-reassign */\n\nvar graphql_1 = require(\"graphql\");\n\nvar json_schema_1 = require(\"./json-schema\");\n\nvar primitiveTypes = {\n  string: graphql_1.GraphQLString,\n  date: graphql_1.GraphQLString,\n  integer: graphql_1.GraphQLInt,\n  number: graphql_1.GraphQLFloat,\n  boolean: graphql_1.GraphQLBoolean\n};\nvar jsonType = new graphql_1.GraphQLScalarType({\n  name: 'JSON',\n  serialize: function (value) {\n    return value;\n  }\n});\n\nfunction getPrimitiveType(format, type) {\n  var primitiveTypeName = format === 'int64' ? 'string' : type;\n  var primitiveType = primitiveTypes[primitiveTypeName];\n\n  if (!primitiveType) {\n    return primitiveTypes.string;\n  }\n\n  return primitiveType;\n}\n\nexports.jsonSchemaTypeToGraphQL = function (title, jsonSchema, propertyName, isInputType, gqlTypes, required) {\n  var baseType = function () {\n    if (json_schema_1.isBodyType(jsonSchema)) {\n      return exports.jsonSchemaTypeToGraphQL(title, jsonSchema.schema, propertyName, isInputType, gqlTypes, required);\n    }\n\n    if (json_schema_1.isObjectType(jsonSchema) || json_schema_1.isArrayType(jsonSchema)) {\n      // eslint-disable-next-line no-use-before-define,@typescript-eslint/no-use-before-define\n      return exports.createGraphQLType(jsonSchema, title + \"_\" + propertyName, isInputType, gqlTypes);\n    }\n\n    if (jsonSchema.type === 'file') {\n      // eslint-disable-next-line no-use-before-define,@typescript-eslint/no-use-before-define\n      return exports.createGraphQLType({\n        type: 'object',\n        required: [],\n        properties: {\n          unsupported: {\n            type: 'string'\n          }\n        }\n      }, title + \"_\" + propertyName, isInputType, gqlTypes);\n    }\n\n    if (jsonSchema.type) {\n      return getPrimitiveType(jsonSchema.format, jsonSchema.type);\n    }\n\n    throw new Error(\"Don't know how to handle schema \" + JSON.stringify(jsonSchema) + \" without type and schema\");\n  }();\n\n  return required ? graphql_1.GraphQLNonNull(baseType) : baseType;\n};\n\nvar makeValidName = function (name) {\n  return name.replace(/[^_0-9A-Za-z]/g, '_');\n};\n\nexports.getTypeFields = function (jsonSchema, title, isInputType, gqlTypes) {\n  return function () {\n    var properties = {};\n\n    if (json_schema_1.isObjectType(jsonSchema)) {\n      Object.keys(jsonSchema.properties).forEach(function (key) {\n        properties[makeValidName(key)] = jsonSchema.properties[key];\n      });\n    }\n\n    return Object.keys(properties).reduce(function (prev, propertyName) {\n      var _a;\n\n      var propertySchema = properties[propertyName];\n      var type = exports.jsonSchemaTypeToGraphQL(title, propertySchema, propertyName, isInputType, gqlTypes, !!(json_schema_1.isObjectType(jsonSchema) && jsonSchema.required && jsonSchema.required.includes(propertyName)));\n      return __assign({}, prev, (_a = {}, _a[propertyName] = {\n        description: propertySchema.description,\n        type: type\n      }, _a));\n    }, {});\n  };\n};\n\nexports.createGraphQLType = function (jsonSchema, title, isInputType, gqlTypes) {\n  title = jsonSchema && jsonSchema.title || title;\n  title = makeValidName(title);\n\n  if (isInputType && !title.endsWith('Input')) {\n    title += 'Input';\n  }\n\n  if (title in gqlTypes) {\n    return gqlTypes[title];\n  }\n\n  if (!jsonSchema) {\n    jsonSchema = {\n      type: 'object',\n      properties: {},\n      required: [],\n      description: '',\n      title: title\n    };\n  } else if (!jsonSchema.title) {\n    jsonSchema = __assign({}, jsonSchema, {\n      title: title\n    });\n  }\n\n  if (json_schema_1.isArrayType(jsonSchema)) {\n    var itemsSchema = Array.isArray(jsonSchema.items) ? jsonSchema.items[0] : jsonSchema.items;\n\n    if (json_schema_1.isObjectType(itemsSchema) || json_schema_1.isArrayType(itemsSchema)) {\n      return new graphql_1.GraphQLList(graphql_1.GraphQLNonNull(exports.createGraphQLType(itemsSchema, title + \"_items\", isInputType, gqlTypes)));\n    }\n\n    if (itemsSchema.type === 'file') {\n      // eslint-disable-next-line no-use-before-define,@typescript-eslint/no-use-before-define\n      return new graphql_1.GraphQLList(graphql_1.GraphQLNonNull(exports.createGraphQLType({\n        type: 'object',\n        required: [],\n        properties: {\n          unsupported: {\n            type: 'string'\n          }\n        }\n      }, title, isInputType, gqlTypes)));\n    }\n\n    var primitiveType = getPrimitiveType(itemsSchema.format, itemsSchema.type);\n    return new graphql_1.GraphQLList(graphql_1.GraphQLNonNull(primitiveType));\n  }\n\n  if (json_schema_1.isObjectType(jsonSchema) && !Object.keys(jsonSchema.properties || {}).length) {\n    return jsonType;\n  }\n\n  var description = jsonSchema.description;\n  var fields = exports.getTypeFields(jsonSchema, title, isInputType, gqlTypes);\n  var result;\n\n  if (isInputType) {\n    result = new graphql_1.GraphQLInputObjectType({\n      name: title,\n      description: description,\n      fields: fields\n    });\n  } else {\n    result = new graphql_1.GraphQLObjectType({\n      name: title,\n      description: description,\n      fields: fields\n    });\n  }\n\n  gqlTypes[title] = result;\n  return result;\n};\n\nexports.mapParametersToFields = function (parameters, typeName, gqlTypes) {\n  return parameters.reduce(function (res, param) {\n    var type = exports.jsonSchemaTypeToGraphQL(\"param_\" + typeName, param.jsonSchema, param.name, true, gqlTypes, param.required);\n    res[param.name] = {\n      type: type\n    };\n    return res;\n  }, {});\n};","map":null,"metadata":{},"sourceType":"script"}