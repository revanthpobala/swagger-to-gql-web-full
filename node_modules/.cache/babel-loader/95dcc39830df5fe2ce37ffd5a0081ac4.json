{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/revanthpobala/IdeaProjects/swagger-to-graphql-web/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLanguageService = void 0;\n\nvar _graphql = require(\"graphql\");\n\nvar _getAutocompleteSuggestions3 = require(\"./getAutocompleteSuggestions\");\n\nvar _getHoverInformation3 = require(\"./getHoverInformation\");\n\nvar _getDiagnostics2 = require(\"./getDiagnostics\");\n\nvar _getDefinition2 = require(\"./getDefinition\");\n\nvar _graphqlLanguageServiceUtils = require(\"graphql-language-service-utils\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar FRAGMENT_DEFINITION = _graphql.Kind.FRAGMENT_DEFINITION,\n    OBJECT_TYPE_DEFINITION = _graphql.Kind.OBJECT_TYPE_DEFINITION,\n    INTERFACE_TYPE_DEFINITION = _graphql.Kind.INTERFACE_TYPE_DEFINITION,\n    ENUM_TYPE_DEFINITION = _graphql.Kind.ENUM_TYPE_DEFINITION,\n    UNION_TYPE_DEFINITION = _graphql.Kind.UNION_TYPE_DEFINITION,\n    SCALAR_TYPE_DEFINITION = _graphql.Kind.SCALAR_TYPE_DEFINITION,\n    INPUT_OBJECT_TYPE_DEFINITION = _graphql.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    SCALAR_TYPE_EXTENSION = _graphql.Kind.SCALAR_TYPE_EXTENSION,\n    OBJECT_TYPE_EXTENSION = _graphql.Kind.OBJECT_TYPE_EXTENSION,\n    INTERFACE_TYPE_EXTENSION = _graphql.Kind.INTERFACE_TYPE_EXTENSION,\n    UNION_TYPE_EXTENSION = _graphql.Kind.UNION_TYPE_EXTENSION,\n    ENUM_TYPE_EXTENSION = _graphql.Kind.ENUM_TYPE_EXTENSION,\n    INPUT_OBJECT_TYPE_EXTENSION = _graphql.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    DIRECTIVE_DEFINITION = _graphql.Kind.DIRECTIVE_DEFINITION,\n    FRAGMENT_SPREAD = _graphql.Kind.FRAGMENT_SPREAD,\n    OPERATION_DEFINITION = _graphql.Kind.OPERATION_DEFINITION,\n    NAMED_TYPE = _graphql.Kind.NAMED_TYPE;\n\nvar GraphQLLanguageService =\n/*#__PURE__*/\nfunction () {\n  function GraphQLLanguageService(cache) {\n    _classCallCheck(this, GraphQLLanguageService);\n\n    _defineProperty(this, \"_graphQLCache\", void 0);\n\n    _defineProperty(this, \"_graphQLConfig\", void 0);\n\n    this._graphQLCache = cache;\n    this._graphQLConfig = cache.getGraphQLConfig();\n  }\n\n  _createClass(GraphQLLanguageService, [{\n    key: \"getDiagnostics\",\n    value: function () {\n      var _getDiagnostics = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(query, uri, isRelayCompatMode) {\n        var queryHasExtensions, projectConfig, schemaPath, queryAST, range, source, fragmentDefinitions, fragmentDependencies, dependenciesSource, validationAst, customRules, customRulesModulePath, rulesPath, schema;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Perform syntax diagnostics first, as this doesn't require\n                // schema/fragment definitions, even the project configuration.\n                queryHasExtensions = false;\n                projectConfig = this._graphQLConfig.getConfigForFile(uri);\n                schemaPath = projectConfig.schemaPath;\n                _context.prev = 3;\n                queryAST = (0, _graphql.parse)(query);\n\n                if (!schemaPath || uri !== schemaPath) {\n                  queryHasExtensions = queryAST.definitions.some(function (definition) {\n                    switch (definition.kind) {\n                      case OBJECT_TYPE_DEFINITION:\n                      case INTERFACE_TYPE_DEFINITION:\n                      case ENUM_TYPE_DEFINITION:\n                      case UNION_TYPE_DEFINITION:\n                      case SCALAR_TYPE_DEFINITION:\n                      case INPUT_OBJECT_TYPE_DEFINITION:\n                      case SCALAR_TYPE_EXTENSION:\n                      case OBJECT_TYPE_EXTENSION:\n                      case INTERFACE_TYPE_EXTENSION:\n                      case UNION_TYPE_EXTENSION:\n                      case ENUM_TYPE_EXTENSION:\n                      case INPUT_OBJECT_TYPE_EXTENSION:\n                      case DIRECTIVE_DEFINITION:\n                        return true;\n                    }\n\n                    return false;\n                  });\n                }\n\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](3);\n                range = (0, _getDiagnostics2.getRange)(_context.t0.locations[0], query);\n                return _context.abrupt(\"return\", [{\n                  severity: _getDiagnostics2.SEVERITY.ERROR,\n                  message: _context.t0.message,\n                  source: 'GraphQL: Syntax',\n                  range: range\n                }]);\n\n              case 12:\n                // If there's a matching config, proceed to prepare to run validation\n                source = query;\n                _context.next = 15;\n                return this._graphQLCache.getFragmentDefinitions(projectConfig);\n\n              case 15:\n                fragmentDefinitions = _context.sent;\n                _context.next = 18;\n                return this._graphQLCache.getFragmentDependencies(query, fragmentDefinitions);\n\n              case 18:\n                fragmentDependencies = _context.sent;\n                dependenciesSource = fragmentDependencies.reduce(function (prev, cur) {\n                  return \"\".concat(prev, \" \").concat((0, _graphql.print)(cur.definition));\n                }, '');\n                source = \"\".concat(source, \" \").concat(dependenciesSource);\n                validationAst = null;\n                _context.prev = 22;\n                validationAst = (0, _graphql.parse)(source);\n                _context.next = 29;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t1 = _context[\"catch\"](22);\n                return _context.abrupt(\"return\", []);\n\n              case 29:\n                customRulesModulePath = projectConfig.extensions.customValidationRules;\n\n                if (customRulesModulePath) {\n                  /* eslint-disable no-implicit-coercion */\n                  rulesPath = require.resolve(\"\".concat(customRulesModulePath));\n\n                  if (rulesPath) {\n                    customRules = require(\"\".concat(rulesPath))(this._graphQLConfig);\n                  }\n                  /* eslint-enable no-implicit-coercion */\n\n                }\n\n                _context.next = 33;\n                return this._graphQLCache.getSchema(projectConfig.projectName, queryHasExtensions)[\"catch\"](function () {\n                  return null;\n                });\n\n              case 33:\n                schema = _context.sent;\n\n                if (schema) {\n                  _context.next = 36;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", []);\n\n              case 36:\n                return _context.abrupt(\"return\", (0, _getDiagnostics2.validateQuery)(validationAst, schema, customRules, isRelayCompatMode));\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 8], [22, 26]]);\n      }));\n\n      function getDiagnostics(_x, _x2, _x3) {\n        return _getDiagnostics.apply(this, arguments);\n      }\n\n      return getDiagnostics;\n    }()\n  }, {\n    key: \"getAutocompleteSuggestions\",\n    value: function () {\n      var _getAutocompleteSuggestions2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(query, position, filePath) {\n        var projectConfig, schema;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n                _context2.next = 3;\n                return this._graphQLCache.getSchema(projectConfig.projectName)[\"catch\"](function () {\n                  return null;\n                });\n\n              case 3:\n                schema = _context2.sent;\n\n                if (!schema) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", (0, _getAutocompleteSuggestions3.getAutocompleteSuggestions)(schema, query, position));\n\n              case 6:\n                return _context2.abrupt(\"return\", []);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAutocompleteSuggestions(_x4, _x5, _x6) {\n        return _getAutocompleteSuggestions2.apply(this, arguments);\n      }\n\n      return getAutocompleteSuggestions;\n    }()\n  }, {\n    key: \"getHoverInformation\",\n    value: function () {\n      var _getHoverInformation2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(query, position, filePath) {\n        var projectConfig, schema;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n                _context3.next = 3;\n                return this._graphQLCache.getSchema(projectConfig.projectName)[\"catch\"](function () {\n                  return null;\n                });\n\n              case 3:\n                schema = _context3.sent;\n\n                if (!schema) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", (0, _getHoverInformation3.getHoverInformation)(schema, query, position));\n\n              case 6:\n                return _context3.abrupt(\"return\", '');\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getHoverInformation(_x7, _x8, _x9) {\n        return _getHoverInformation2.apply(this, arguments);\n      }\n\n      return getHoverInformation;\n    }()\n  }, {\n    key: \"getDefinition\",\n    value: function () {\n      var _getDefinition = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(query, position, filePath) {\n        var projectConfig, ast, node;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                projectConfig = this._graphQLConfig.getConfigForFile(filePath);\n                _context4.prev = 1;\n                ast = (0, _graphql.parse)(query);\n                _context4.next = 8;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](1);\n                return _context4.abrupt(\"return\", null);\n\n              case 8:\n                node = (0, _graphqlLanguageServiceUtils.getASTNodeAtPosition)(query, ast, position);\n\n                if (!node) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.t1 = node.kind;\n                _context4.next = _context4.t1 === FRAGMENT_SPREAD ? 13 : _context4.t1 === FRAGMENT_DEFINITION ? 14 : _context4.t1 === OPERATION_DEFINITION ? 14 : _context4.t1 === NAMED_TYPE ? 15 : 16;\n                break;\n\n              case 13:\n                return _context4.abrupt(\"return\", this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig));\n\n              case 14:\n                return _context4.abrupt(\"return\", (0, _getDefinition2.getDefinitionQueryResultForDefinitionNode)(filePath, query, node));\n\n              case 15:\n                return _context4.abrupt(\"return\", this._getDefinitionForNamedType(query, ast, node, filePath, projectConfig));\n\n              case 16:\n                return _context4.abrupt(\"return\", null);\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 5]]);\n      }));\n\n      function getDefinition(_x10, _x11, _x12) {\n        return _getDefinition.apply(this, arguments);\n      }\n\n      return getDefinition;\n    }()\n  }, {\n    key: \"_getDefinitionForNamedType\",\n    value: function () {\n      var _getDefinitionForNamedType2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(query, ast, node, filePath, projectConfig) {\n        var objectTypeDefinitions, dependencies, localObjectTypeDefinitions, typeCastedDefs, localOperationDefinationInfos, result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._graphQLCache.getObjectTypeDefinitions(projectConfig);\n\n              case 2:\n                objectTypeDefinitions = _context5.sent;\n                _context5.next = 5;\n                return this._graphQLCache.getObjectTypeDependenciesForAST(ast, objectTypeDefinitions);\n\n              case 5:\n                dependencies = _context5.sent;\n                localObjectTypeDefinitions = ast.definitions.filter(function (definition) {\n                  return definition.kind === OBJECT_TYPE_DEFINITION || definition.kind === INPUT_OBJECT_TYPE_DEFINITION || definition.kind === ENUM_TYPE_DEFINITION;\n                });\n                typeCastedDefs = localObjectTypeDefinitions;\n                localOperationDefinationInfos = typeCastedDefs.map(function (definition) {\n                  return {\n                    filePath: filePath,\n                    content: query,\n                    definition: definition\n                  };\n                });\n                _context5.next = 11;\n                return (0, _getDefinition2.getDefinitionQueryResultForNamedType)(query, node, dependencies.concat(localOperationDefinationInfos));\n\n              case 11:\n                result = _context5.sent;\n                return _context5.abrupt(\"return\", result);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _getDefinitionForNamedType(_x13, _x14, _x15, _x16, _x17) {\n        return _getDefinitionForNamedType2.apply(this, arguments);\n      }\n\n      return _getDefinitionForNamedType;\n    }()\n  }, {\n    key: \"_getDefinitionForFragmentSpread\",\n    value: function () {\n      var _getDefinitionForFragmentSpread2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(query, ast, node, filePath, projectConfig) {\n        var fragmentDefinitions, dependencies, localFragDefinitions, typeCastedDefs, localFragInfos, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._graphQLCache.getFragmentDefinitions(projectConfig);\n\n              case 2:\n                fragmentDefinitions = _context6.sent;\n                _context6.next = 5;\n                return this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions);\n\n              case 5:\n                dependencies = _context6.sent;\n                localFragDefinitions = ast.definitions.filter(function (definition) {\n                  return definition.kind === FRAGMENT_DEFINITION;\n                });\n                typeCastedDefs = localFragDefinitions;\n                localFragInfos = typeCastedDefs.map(function (definition) {\n                  return {\n                    filePath: filePath,\n                    content: query,\n                    definition: definition\n                  };\n                });\n                _context6.next = 11;\n                return (0, _getDefinition2.getDefinitionQueryResultForFragmentSpread)(query, node, dependencies.concat(localFragInfos));\n\n              case 11:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _getDefinitionForFragmentSpread(_x18, _x19, _x20, _x21, _x22) {\n        return _getDefinitionForFragmentSpread2.apply(this, arguments);\n      }\n\n      return _getDefinitionForFragmentSpread;\n    }()\n  }]);\n\n  return GraphQLLanguageService;\n}();\n\nexports.GraphQLLanguageService = GraphQLLanguageService;","map":null,"metadata":{},"sourceType":"script"}