{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_schema_1 = require(\"./json-schema\");\n\nvar getRequestOptions_1 = require(\"./getRequestOptions\");\n\nvar replaceOddChars = function (str) {\n  return str.replace(/[^_a-zA-Z0-9]/g, '_');\n};\n\nvar getGQLTypeNameFromURL = function (method, url) {\n  var fromUrl = replaceOddChars(url.replace(/[{}]+/g, ''));\n  return \"\" + method + fromUrl;\n};\n\nexports.getSuccessResponse = function (responses) {\n  var successCode = Object.keys(responses).find(function (code) {\n    return code[0] === '2';\n  });\n\n  if (!successCode) {\n    return undefined;\n  }\n\n  var successResponse = responses[successCode];\n\n  if (!successResponse) {\n    throw new Error(\"Expected responses[\" + successCode + \"] to be defined\");\n  }\n\n  if (successResponse.schema) {\n    return successResponse.schema;\n  }\n\n  if (successResponse.content) {\n    return successResponse.content['application/json'].schema;\n  }\n\n  return undefined;\n};\n\nexports.isOa3Param = function (param) {\n  return !!param.schema;\n};\n\nfunction addTitlesToJsonSchemas(schema) {\n  var requestBodies = (schema.components || {}).requestBodies || {};\n  Object.keys(requestBodies).forEach(function (requestBodyName) {\n    var content = requestBodies[requestBodyName].content;\n    Object.keys(content).forEach(function (contentKey) {\n      var contentValue = content[contentKey];\n\n      if (contentValue) {\n        contentValue.schema.title = contentValue.schema.title || requestBodyName;\n      }\n    });\n  });\n  var jsonSchemas = (schema.components || {}).schemas || {};\n  Object.keys(jsonSchemas).forEach(function (schemaName) {\n    var jsonSchema = jsonSchemas[schemaName];\n    jsonSchema.title = jsonSchema.title || schemaName;\n  });\n  var definitions = schema.definitions || {};\n  Object.keys(definitions).forEach(function (definitionName) {\n    var jsonSchema = definitions[definitionName];\n    jsonSchema.title = jsonSchema.title || definitionName;\n  });\n  return schema;\n}\n\nexports.addTitlesToJsonSchemas = addTitlesToJsonSchemas;\n\nexports.getServerPath = function (schema) {\n  var server = schema.servers && Array.isArray(schema.servers) ? schema.servers[0] : schema.host ? [schema.schemes && schema.schemes[0] || 'http', '://', schema.host, schema.basePath].filter(Boolean).join('') : undefined;\n\n  if (!server) {\n    return undefined;\n  }\n\n  if (typeof server === 'string') {\n    return server;\n  }\n\n  var url = server.url,\n      variables = server.variables;\n  return variables ? Object.keys(server.variables).reduce(function (acc, variableName) {\n    var variable = server.variables[variableName];\n    var value = typeof variable === 'string' ? variable : variable.default || variable.enum[0];\n    return acc.replace(\"{\" + variableName + \"}\", value);\n  }, url) : url;\n};\n\nexports.getParamDetails = function (param) {\n  var name = replaceOddChars(param.name);\n  var swaggerName = param.name;\n\n  if (exports.isOa3Param(param)) {\n    var _a = param,\n        schema = _a.schema,\n        required = _a.required,\n        type = _a.in;\n    return {\n      name: name,\n      swaggerName: swaggerName,\n      type: type,\n      required: !!required,\n      jsonSchema: schema\n    };\n  }\n\n  return {\n    name: name,\n    swaggerName: swaggerName,\n    type: param.in,\n    required: !!param.required,\n    jsonSchema: param\n  };\n};\n\nvar contentTypeFormData = 'application/x-www-form-urlencoded';\n\nexports.getParamDetailsFromRequestBody = function (requestBody) {\n  var formData = requestBody.content[contentTypeFormData];\n\n  function getSchemaFromRequestBody() {\n    if (requestBody.content['application/json']) {\n      return requestBody.content['application/json'].schema;\n    }\n\n    throw new Error(\"Unsupported content type(s) found: \" + Object.keys(requestBody.content).join(', '));\n  }\n\n  if (formData) {\n    var formdataSchema_1 = formData.schema;\n\n    if (!json_schema_1.isObjectType(formdataSchema_1)) {\n      throw new Error(\"RequestBody is formData, expected an object schema, got \\\"\" + JSON.stringify(formdataSchema_1) + \"\\\"\");\n    }\n\n    return Object.entries(formdataSchema_1.properties).map(function (_a) {\n      var name = _a[0],\n          schema = _a[1];\n      return {\n        name: replaceOddChars(name),\n        swaggerName: name,\n        type: 'formData',\n        required: formdataSchema_1.required ? formdataSchema_1.required.includes(name) : false,\n        jsonSchema: schema\n      };\n    });\n  }\n\n  return [{\n    name: 'body',\n    swaggerName: 'requestBody',\n    type: 'body',\n    required: !!requestBody.required,\n    jsonSchema: getSchemaFromRequestBody()\n  }];\n};\n\nfunction isFormdataRequest(requestBody) {\n  return !!requestBody.content[contentTypeFormData];\n}\n/**\n * Go through schema and grab routes\n */\n\n\nexports.getAllEndPoints = function (schema) {\n  var allOperations = {};\n  var serverPath = exports.getServerPath(schema);\n  Object.keys(schema.paths).forEach(function (path) {\n    var route = schema.paths[path];\n    Object.keys(route).forEach(function (method) {\n      if (method === 'parameters' || method === 'servers') {\n        return;\n      }\n\n      var operationObject = route[method];\n      var isMutation = ['post', 'put', 'patch', 'delete'].indexOf(method) !== -1;\n      var operationId = operationObject.operationId ? replaceOddChars(operationObject.operationId) : getGQLTypeNameFromURL(method, path); // [FIX] for when parameters is a child of route and not route[method]\n\n      if (route.parameters) {\n        if (operationObject.parameters) {\n          operationObject.parameters = route.parameters.concat(operationObject.parameters);\n        } else {\n          operationObject.parameters = route.parameters;\n        }\n      }\n\n      var bodyParams = operationObject.requestBody ? exports.getParamDetailsFromRequestBody(operationObject.requestBody) : [];\n      var parameterDetails = (operationObject.parameters ? operationObject.parameters.map(function (param) {\n        return exports.getParamDetails(param);\n      }) : []).concat(bodyParams);\n      var endpoint = {\n        parameters: parameterDetails,\n        description: operationObject.description,\n        response: exports.getSuccessResponse(operationObject.responses),\n        getRequestOptions: function (parameterValues) {\n          return getRequestOptions_1.getRequestOptions({\n            parameterDetails: parameterDetails,\n            parameterValues: parameterValues,\n            baseUrl: serverPath,\n            path: path,\n            method: method,\n            formData: operationObject.consumes ? !operationObject.consumes.includes('application/json') : operationObject.requestBody ? isFormdataRequest(operationObject.requestBody) : false\n          });\n        },\n        mutation: isMutation\n      };\n      allOperations[operationId] = endpoint;\n    });\n  });\n  return allOperations;\n};","map":null,"metadata":{},"sourceType":"script"}