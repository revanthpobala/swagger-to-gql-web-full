{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n *  Copyright (c) 2019 GraphQL Contributors.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\nvar StorageAPI =\n/*#__PURE__*/\nfunction () {\n  function StorageAPI(storage) {\n    _classCallCheck(this, StorageAPI);\n\n    this.storage = storage || window.localStorage;\n  }\n\n  _createClass(StorageAPI, [{\n    key: \"get\",\n    value: function get(name) {\n      if (this.storage) {\n        var value = this.storage.getItem('graphiql:' + name); // Clean up any inadvertently saved null/undefined values.\n\n        if (value === 'null' || value === 'undefined') {\n          this.storage.removeItem('graphiql:' + name);\n        } else {\n          return value;\n        }\n      }\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      if (this.storage) {\n        var key = \"graphiql:\".concat(name);\n\n        if (value) {\n          if (isStorageAvailable(this.storage, key, value)) {\n            this.storage.setItem(key, value);\n          }\n        } else {\n          // Clean up by removing the item if there's no value to set\n          this.storage.removeItem(key);\n        }\n      }\n    }\n  }]);\n\n  return StorageAPI;\n}();\n\nexports.default = StorageAPI;\n\nfunction isStorageAvailable(storage, key, value) {\n  try {\n    storage.setItem(key, value);\n    return true;\n  } catch (e) {\n    return e instanceof DOMException && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === 'QuotaExceededError' || // Firefox\n    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\n    storage.length !== 0;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}