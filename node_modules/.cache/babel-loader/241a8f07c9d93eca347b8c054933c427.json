{"ast":null,"code":"\"use strict\";\n\nvar _codemirror = _interopRequireDefault(require(\"codemirror\"));\n\nvar _getTypeInfo = _interopRequireDefault(require(\"./utils/getTypeInfo\"));\n\nvar _SchemaReference = require(\"./utils/SchemaReference\");\n\nrequire(\"./utils/jump-addon\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n *  Copyright (c) 2019 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n * \n * \n * \n */\n\n/**\n * Registers GraphQL \"jump\" links for CodeMirror.\n *\n * When command-hovering over a token, this converts it to a link, which when\n * pressed will call the provided onClick handler.\n *\n * Options:\n *\n *   - schema: GraphQLSchema provides positionally relevant info.\n *   - onClick: A function called when a named thing is clicked.\n *\n */\n\n\n_codemirror[\"default\"].registerHelper('jump', 'graphql', function (token, options) {\n  if (!options.schema || !options.onClick || !token.state) {\n    return;\n  } // Given a Schema and a Token, produce a \"SchemaReference\" which refers to\n  // the particular artifact from the schema (such as a type, field, argument,\n  // or directive) that token references.\n\n\n  var state = token.state;\n  var kind = state.kind;\n  var step = state.step;\n  var typeInfo = (0, _getTypeInfo[\"default\"])(options.schema, state);\n\n  if (kind === 'Field' && step === 0 && typeInfo.fieldDef || kind === 'AliasedField' && step === 2 && typeInfo.fieldDef) {\n    return (0, _SchemaReference.getFieldReference)(typeInfo);\n  } else if (kind === 'Directive' && step === 1 && typeInfo.directiveDef) {\n    return (0, _SchemaReference.getDirectiveReference)(typeInfo);\n  } else if (kind === 'Argument' && step === 0 && typeInfo.argDef) {\n    return (0, _SchemaReference.getArgumentReference)(typeInfo);\n  } else if (kind === 'EnumValue' && typeInfo.enumValue) {\n    return (0, _SchemaReference.getEnumValueReference)(typeInfo);\n  } else if (kind === 'NamedType' && typeInfo.type) {\n    return (0, _SchemaReference.getTypeReference)(typeInfo);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}