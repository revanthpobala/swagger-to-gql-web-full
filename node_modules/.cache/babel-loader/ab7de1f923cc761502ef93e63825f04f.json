{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/revanthpobala/IdeaProjects/swagger-to-graphql-web/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/revanthpobala/IdeaProjects/swagger-to-graphql-web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/revanthpobala/IdeaProjects/swagger-to-graphql-web/src/App.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    # To run the query: click the run button above\\n    # To edit the query: use the explorer on the left or edit the text below\\n    # To toggle autocomplete: press ctrl + space or cmd + space\\n    \\n    query PetInfo {\\n      findPetsByStatus(status: \\\"sold\\\") {\\n        id\\n        name\\n        category {\\n          name\\n        }\\n        tags {\\n          name\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport GraphiQL, { ToolbarButton } from 'graphiql';\nimport { graphql } from 'graphql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport dedent from 'dedent';\nimport { createSchema } from './schema';\nimport 'graphiql/graphiql.css';\nimport './App.css';\nimport ReactGA from 'react-ga';\nReactGA.initialize('UA-148987688-1', {\n  debug: window.location.hostname === 'localhost'\n});\nconst initialSwaggerSchema = 'https://petstore.swagger.io/v2/swagger.json';\n\nconst ChangeSchemaForm = ({\n  onChangeSchema\n}) => {\n  const _useState = useState('loading'),\n        _useState2 = _slicedToArray(_useState, 2),\n        createSchemaState = _useState2[0],\n        setCreateSchemaState = _useState2[1];\n\n  const submitRef = useRef(null);\n  const setUrl = useCallback(url => createSchema(url).then(schema => {\n    ReactGA.event({\n      category: 'Schema loading',\n      action: 'Load success',\n      label: url === initialSwaggerSchema ? 'default schema' : 'custom schema'\n    });\n    setCreateSchemaState('initial');\n    onChangeSchema(schema);\n  }, error => {\n    ReactGA.event({\n      category: 'Schema loading',\n      action: 'Load fail',\n      label: url === initialSwaggerSchema ? 'default schema' : 'custom schema'\n    });\n    setCreateSchemaState(error);\n  }), [setCreateSchemaState, onChangeSchema]);\n  useEffect(() => {\n    setUrl(initialSwaggerSchema);\n  }, [setUrl]);\n  return React.createElement(\"form\", {\n    className: \"changeSchemaForm\",\n    onSubmitCapture: e => {\n      e.preventDefault();\n      setCreateSchemaState('loading');\n      const url = e.currentTarget.url.value;\n      setUrl(url);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    name: \"url\",\n    className: \"urlInput\",\n    placeholder: 'Paste a swagger/openapi url here...',\n    defaultValue: initialSwaggerSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    hidden: true,\n    ref: submitRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(ToolbarButton, {\n    onClick: () => {\n      submitRef.current && submitRef.current.click();\n    },\n    title: 'Fetches the Swagger/OpenAPI schema and converts it to GraphQL',\n    label: createSchemaState === 'loading' ? 'Update schema...' : 'Update schema',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), createSchemaState instanceof Error && React.createElement(\"span\", {\n    className: \"changeSchemaFormError\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Error: \".concat(createSchemaState.message)));\n};\n\nconst App = () => {\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        schemaState = _useState4[0],\n        setSchema = _useState4[1];\n\n  const _useState5 = useState(dedent(_templateObject())),\n        _useState6 = _slicedToArray(_useState5, 2),\n        query = _useState6[0],\n        setQuery = _useState6[1];\n\n  const graphiqlRef = useRef();\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isExplorerOpen = _useState8[0],\n        setIsExplorerOpen = _useState8[1];\n\n  return React.createElement(\"div\", {\n    className: \"graphiql-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(GraphiQLExplorer, {\n    schema: schemaState,\n    query: query,\n    onEdit: setQuery,\n    onRunOperation: operationName => graphiqlRef.current.handleRunQuery(operationName),\n    explorerIsOpen: isExplorerOpen,\n    onToggleExplorer: () => setIsExplorerOpen(!isExplorerOpen),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(GraphiQL, {\n    ref: graphiqlRef,\n    schema: schemaState,\n    query: query,\n    onEditQuery: setQuery,\n    fetcher: async ({\n      query,\n      variables,\n      operationName\n    }) => {\n      if (schemaState) {\n        try {\n          const result = await graphql({\n            schema: schemaState,\n            source: query,\n            variableValues: variables,\n            operationName\n          });\n          const hasErrors = result.errors && result.errors.length;\n          ReactGA.event({\n            category: 'query',\n            action: 'execution success',\n            label: hasErrors ? 'has errors' : 'no errors'\n          });\n          return result;\n        } catch (e) {\n          ReactGA.event({\n            category: 'query',\n            action: 'execution failed'\n          });\n          throw e;\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(GraphiQL.Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(ChangeSchemaForm, {\n    onChangeSchema: setSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), React.createElement(ToolbarButton, {\n    onClick: () => {\n      graphiqlRef.current.handlePrettifyQuery();\n    },\n    title: \"Prettify Query (Shift-Ctrl-P)\",\n    label: \"Prettify\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(ToolbarButton, {\n    onClick: () => {\n      graphiqlRef.current.handleToggleHistory();\n    },\n    title: \"Show History\",\n    label: \"History\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(GraphiQL.Button, {\n    onClick: () => setIsExplorerOpen(!isExplorerOpen),\n    label: \"Explorer\",\n    title: \"Toggle Explorer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/revanthpobala/IdeaProjects/swagger-to-graphql-web/src/App.tsx"],"names":["React","useRef","useState","useEffect","useCallback","GraphiQL","ToolbarButton","graphql","GraphiQLExplorer","dedent","createSchema","ReactGA","initialize","debug","window","location","hostname","initialSwaggerSchema","ChangeSchemaForm","onChangeSchema","createSchemaState","setCreateSchemaState","submitRef","setUrl","url","then","schema","event","category","action","label","error","e","preventDefault","currentTarget","value","current","click","Error","message","App","schemaState","setSchema","query","setQuery","graphiqlRef","isExplorerOpen","setIsExplorerOpen","operationName","handleRunQuery","variables","result","source","variableValues","hasErrors","errors","length","handlePrettifyQuery","handleToggleHistory"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\nimport GraphiQL, { ToolbarButton } from 'graphiql';\nimport { graphql, GraphQLSchema } from 'graphql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport dedent from 'dedent';\nimport { createSchema } from './schema';\nimport 'graphiql/graphiql.css';\nimport './App.css';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-148987688-1', {\n  debug: window.location.hostname === 'localhost',\n});\n\nconst initialSwaggerSchema = 'https://petstore.swagger.io/v2/swagger.json';\n\nconst ChangeSchemaForm = ({\n  onChangeSchema,\n}: {\n  onChangeSchema: (schema: GraphQLSchema) => void;\n}) => {\n  const [createSchemaState, setCreateSchemaState] = useState<\n    'initial' | 'loading' | Error\n  >('loading');\n  const submitRef = useRef<HTMLInputElement | null>(null);\n\n  const setUrl = useCallback(\n    url =>\n      createSchema(url).then(\n        (schema: GraphQLSchema) => {\n          ReactGA.event({\n            category: 'Schema loading',\n            action: 'Load success',\n            label:\n              url === initialSwaggerSchema ? 'default schema' : 'custom schema',\n          });\n          setCreateSchemaState('initial');\n          onChangeSchema(schema);\n        },\n        (error: Error) => {\n          ReactGA.event({\n            category: 'Schema loading',\n            action: 'Load fail',\n            label:\n              url === initialSwaggerSchema ? 'default schema' : 'custom schema',\n          });\n          setCreateSchemaState(error);\n        },\n      ),\n    [setCreateSchemaState, onChangeSchema],\n  );\n\n  useEffect(() => {\n    setUrl(initialSwaggerSchema);\n  }, [setUrl]);\n\n  return (\n    <form\n      className=\"changeSchemaForm\"\n      onSubmitCapture={e => {\n        e.preventDefault();\n        setCreateSchemaState('loading');\n        const url: string = e.currentTarget.url.value;\n        setUrl(url);\n      }}\n    >\n      <input\n        name=\"url\"\n        className=\"urlInput\"\n        placeholder={'Paste a swagger/openapi url here...'}\n        defaultValue={initialSwaggerSchema}\n      />\n      <input type=\"submit\" hidden ref={submitRef} />\n\n      <ToolbarButton\n        onClick={() => {\n          submitRef.current && submitRef.current.click();\n        }}\n        title={'Fetches the Swagger/OpenAPI schema and converts it to GraphQL'}\n        label={\n          createSchemaState === 'loading' ? 'Update schema...' : 'Update schema'\n        }\n      />\n\n      {createSchemaState instanceof Error && (\n        <span className=\"changeSchemaFormError\">{`Error: ${createSchemaState.message}`}</span>\n      )}\n    </form>\n  );\n};\n\nconst App: React.FC = () => {\n  const [schemaState, setSchema] = useState<null | GraphQLSchema>(null);\n  const [query, setQuery] = useState<string>(dedent`\n    # To run the query: click the run button above\n    # To edit the query: use the explorer on the left or edit the text below\n    # To toggle autocomplete: press ctrl + space or cmd + space\n    \n    query PetInfo {\n      findPetsByStatus(status: \"sold\") {\n        id\n        name\n        category {\n          name\n        }\n        tags {\n          name\n        }\n      }\n    }\n  `);\n\n  const graphiqlRef = useRef<any>();\n\n  const [isExplorerOpen, setIsExplorerOpen] = useState<boolean>(true);\n\n  return (\n    <div className=\"graphiql-container\">\n      <GraphiQLExplorer\n        schema={schemaState}\n        query={query}\n        onEdit={setQuery}\n        onRunOperation={(operationName: string) =>\n          graphiqlRef.current.handleRunQuery(operationName)\n        }\n        explorerIsOpen={isExplorerOpen}\n        onToggleExplorer={() => setIsExplorerOpen(!isExplorerOpen)}\n      />\n      <GraphiQL\n        ref={graphiqlRef}\n        schema={schemaState}\n        query={query}\n        onEditQuery={setQuery}\n        fetcher={async ({\n          query,\n          variables,\n          operationName,\n        }: {\n          query: string;\n          variables: { [key: string]: any };\n          operationName?: string;\n        }) => {\n          if (schemaState) {\n            try {\n              const result = await graphql({\n                schema: schemaState,\n                source: query,\n                variableValues: variables,\n                operationName,\n              });\n              const hasErrors = result.errors && result.errors.length;\n              ReactGA.event({\n                category: 'query',\n                action: 'execution success',\n                label: hasErrors ? 'has errors' : 'no errors',\n              });\n              return result;\n            } catch (e) {\n              ReactGA.event({\n                category: 'query',\n                action: 'execution failed',\n              });\n              throw e;\n            }\n          }\n        }}\n      >\n        <GraphiQL.Toolbar>\n          <ChangeSchemaForm onChangeSchema={setSchema} />\n          <ToolbarButton\n            onClick={() => {\n              graphiqlRef.current.handlePrettifyQuery();\n            }}\n            title=\"Prettify Query (Shift-Ctrl-P)\"\n            label=\"Prettify\"\n          />\n          <ToolbarButton\n            onClick={() => {\n              graphiqlRef.current.handleToggleHistory();\n            }}\n            title=\"Show History\"\n            label=\"History\"\n          />\n          <GraphiQL.Button\n            onClick={() => setIsExplorerOpen(!isExplorerOpen)}\n            label=\"Explorer\"\n            title=\"Toggle Explorer\"\n          />\n        </GraphiQL.Toolbar>\n      </GraphiQL>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}